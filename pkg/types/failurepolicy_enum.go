// Code generated by go-enum
// DO NOT EDIT!

package types

import (
	"fmt"
	"strings"
)

const (
	// FailurePolicyIgnore is a FailurePolicy of type Ignore
	FailurePolicyIgnore FailurePolicy = iota
	// FailurePolicyFail is a FailurePolicy of type Fail
	FailurePolicyFail
)

const _FailurePolicyName = "IgnoreFail"

var _FailurePolicyMap = map[FailurePolicy]string{
	0: _FailurePolicyName[0:6],
	1: _FailurePolicyName[6:10],
}

func (i FailurePolicy) String() string {
	if str, ok := _FailurePolicyMap[i]; ok {
		return str
	}
	return fmt.Sprintf("FailurePolicy(%d)", i)
}

var _FailurePolicyValue = map[string]FailurePolicy{
	_FailurePolicyName[0:6]:                   0,
	strings.ToLower(_FailurePolicyName[0:6]):  0,
	_FailurePolicyName[6:10]:                  1,
	strings.ToLower(_FailurePolicyName[6:10]): 1,
}

// ParseFailurePolicy attempts to convert a string to a FailurePolicy
func ParseFailurePolicy(name string) (FailurePolicy, error) {
	if x, ok := _FailurePolicyValue[name]; ok {
		return FailurePolicy(x), nil
	}
	return FailurePolicy(0), fmt.Errorf("%s is not a valid FailurePolicy", name)
}

// Set implements the Golang flag.Value interface func
func (x *FailurePolicy) Set(val string) error {
	v, err := ParseFailurePolicy(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func
func (x *FailurePolicy) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface
func (x *FailurePolicy) Type() string {
	return "FailurePolicy"
}
